INSERT INTO knowledge VALUES(null,'Spring','Spring是Java EE编程领域的一个轻量级开源框架，该框架由一个叫Rod Johnson的程序员在 2002 年最早提出并随后创建，是为了解决企业级编程开发中的复杂性，实现敏捷开发的应用型框架 。');
INSERT INTO knowledge VALUES(null,'Spring基础语法','Spring基础语法是指Spring中主要使用的基础语法，主要基于Java');
INSERT INTO knowledge VALUES(null,'Java','Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。');
INSERT INTO knowledge VALUES(null,'Java基础语法','一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。');
INSERT INTO knowledge VALUES(null,'maven','aven 翻译为\'专家\'、\'内行\'，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。');
INSERT INTO knowledge VALUES(null,'Jar包','在软件领域，JAR文件（Java归档，英语：Java Archive）是一种软件包文件格式，通常用于聚合大量的Java类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便开发Java平台应用软件或库。');
INSERT INTO knowledge VALUES(null,'pom.xml','POM是项目对象模型(Project Object Model)的简称,它是Maven项目中的文件，使用XML表示，名称叫做pom.xml。作用类似ant的build.xml文件，功能更强大。该文件用于管理：源代码、配置文件、开发者的信息和角色、问题追踪系统、组织信息、项目授权、项目的url、项目的依赖关系等等。事实上，在Maven世界中，project可以什么都没有，甚至没有代码，但是必须包含pom.xml文件。');
INSERT INTO knowledge VALUES(null,'maven repository','在 Maven 的术语中，仓库是一个位置（place）。Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。在 Maven 中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件。Maven 仓库能帮助我们管理构件（主要是JAR），它就是放置所有JAR文件（WAR，ZIP，POM等等）的地方。');
INSERT INTO knowledge VALUES(null,'Spring Core','Spring core是用来负责发现、创建并处理bean之间的关系的一个工具包。core把bean的创建、bean的互相注入的方法定义完毕，上层服务只需要进行调用；提供功能但不调用就是spring core的存在意义。');
INSERT INTO knowledge VALUES(null,'bean','Spring Bean是被实例的，组装的及被Spring 容器管理的Java对象。');
INSERT INTO knowledge VALUES(null,'annotation','Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。');
INSERT INTO knowledge VALUES(null,'Spring Injection','通过spring工厂和配置文件为spring的成员变量赋值');
INSERT INTO knowledge VALUES(null,'Spring Boot','Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。');
INSERT INTO knowledge VALUES(null,'IOC container','IoC全称为inversion of control（控制反转），依赖注入是一种IOC的表现形式，主要表现为让第三方来管理自己的依赖。');
INSERT INTO knowledge VALUES(null,'http/https','HTTP协议是超文本传输协议的缩写，英文是Hyper Text Transfer Protocol。它是从WEB服务器传输超文本标记语言(HTML)到本地浏览器的传送协议。');
INSERT INTO knowledge VALUES(null,'Tomcat','Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。');
INSERT INTO knowledge VALUES(null,'Jetty','Jetty 是一个开源的servlet容器，它为基于Java的web容器，例如JSP和servlet提供运行环境。');
INSERT INTO knowledge VALUES(null,'Spring Initialier','Spring Initializer 是帮助我们快速生成 Spring Boot 项目的工具，它是以 Web 网站的形式对外提供的，但是它的 API 也是公开的，因此我们可以在各种 IDE 平台，编辑器平台中见到它的身影。');
INSERT INTO knowledge VALUES(null,'Spring Controller','在Spring中 Controller注解用于指示Spring类的实例是一个控制器，相对于实现Controller接口变得更加简单。而且实现Controller接口只能处理一个单一的请求，而是用@Controller注解可以支持同时处理多个请求动作，更加灵活。');
INSERT INTO knowledge VALUES(null,'Restful Api','RESTful API 是两个计算机系统用于通过互联网安全地交换信息的接口。大多数业务应用程序必须与其他内部和第三方应用程序进行通信才能执行各种任务。');
INSERT INTO knowledge VALUES(null,'Swagger','Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。');
INSERT INTO knowledge VALUES(null,'Web Api','Web API是网络应用程序接口。包含了广泛的功能，网络应用通过API接口，可以实现存储服务、消息服务、计算服务等能力，利用这些能力可以进行开发出强大功能的web应用。');
INSERT INTO knowledge VALUES(null,'HTTP Status code','当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含 HTTP 状态码的信息头（server header）用以响应浏览器的请求。');
INSERT INTO knowledge VALUES(null,'Postman','Postman是一款可用于测试接口的HTTP工具');
INSERT INTO knowledge VALUES(null,'Spring Service','Service是项目中用于处理业务逻辑的，因为每种数据在做某种操作时，应该都有某些规则');
INSERT INTO knowledge VALUES(null,'Vue','Vue是一套用于构建用户界面的渐进式JavaScript框架。');
INSERT INTO knowledge VALUES(null,'react','React 是一个用于构建用户界面的 JAVASCRIPT 库。');
INSERT INTO knowledge VALUES(null,'HTML','HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。');
INSERT INTO knowledge VALUES(null,'JavaScript','JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。');
INSERT INTO knowledge VALUES(null,'CSS','CSS (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如 HTML 文档或 XML 应用）添加样式（字体、间距和颜色等）的计算机语言，CSS 文件扩展名为 .css。');
INSERT INTO knowledge VALUES(null,'Spring Data','Spring 的一个子项目。用于简化数据库访问，支持NoSQL和关系数据库存储。其主要目标是使数据库的访问变得方便快捷。');
INSERT INTO knowledge VALUES(null,'NEO4j','Neo4j是一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎');
INSERT INTO knowledge VALUES(null,'MyBatis','MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。');
INSERT INTO knowledge VALUES(null,'MyBatis-Plus','MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。');
INSERT INTO knowledge VALUES(null,'MyBatis-Plus code-generation','可用于自动生成代码的库');
INSERT INTO knowledge VALUES(null,'ORM','对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。');
INSERT INTO knowledge VALUES(null,'JPA','JPA 是Java Persistence API的缩写，是一套由Java官方制定的ORM标准。当制定这套标准以后，市场上就出现很多JPA框架。如：OpenJPA（apache），EclipseTop（linktop）(eclipse)，Hibernate。');
INSERT INTO knowledge VALUES(null,'JAPRepository','JpaRepository接口同时拥有了基本CRUD功能以及分页功能。');
INSERT INTO knowledge VALUES(null,'JDBC','JDBC API是一个Java API，可以访问任何类型表列数据，特别是存储在关系数据库中的数据。JDBC代表Java数据库连接。');
INSERT INTO knowledge VALUES(null,'SQL','SQL (Structured Query Language) 是具有数据操纵和数据定义等多种功能的数据库语言，这种语言具有交互性特点，能为用户提供极大的便利，数据库管理系统应充分利用SQL语言提高计算机应用系统的工作质量与效率。');
INSERT INTO knowledge VALUES(null,'Redis','Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。');
INSERT INTO knowledge VALUES(null,'junit','JUnit是一个Java语言的单元测试框架。');
INSERT INTO knowledge VALUES(null,'Spring AOP','Spring框架的关键组件之一是面向方面编程(AOP)。 面向方面的编程需要将程序逻辑分解成不同的部分。 跨越应用程序的多个点的功能被称为交叉切割问题，这些交叉关切在概念上与应用程序的业务逻辑分开。');
INSERT INTO knowledge VALUES(null,'Exception Handler','@ExceptionHandler注解一般是用来自定义异常的。可以认为它是一个异常拦截器（处理器）。');
INSERT INTO knowledge VALUES(null,'Spring Security','Spring Security 是spring项目之中的一个安全模块，可以非常方便与spring项目无缝集成。');
INSERT INTO knowledge VALUES(null,'Authentication','在Spring Security中，通过Authentication来封装用户的验证请求信息，Authentication可以是需要验证和已验证的用户请求信息封装。');
INSERT INTO knowledge VALUES(null,'Authorization','授权决定了您访问系统的能力以及达到的程度。验证成功后，系统验证您的身份后，即可授权您访问系统资源。');
INSERT INTO knowledge VALUES(null,'Shiro','Apache Shiro 是 Java 的一个安全框架。');
INSERT INTO knowledge VALUES(null,'JWT','JWT全称JSON Web Token，是javaweb官方提供的一种封装用户数据，保证权限访问的字符串。');
INSERT INTO knowledge VALUES(null,'cookie','Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 。');
INSERT INTO knowledge VALUES(null,'session','在计算机专业术语中，Session是指一个终端用户与交互系统进行通信的时间间隔，通常指从注册进入系统到注销退出系统之间所经过的时间。以及如果需要的话，可能还有一定的操作空间。');
INSERT INTO knowledge VALUES(null,'cache','缓存（cache），原始意义是指访问速度比一般随机存取存储器（RAM）快的一种高速存储器，通常它不像系统主存那样使用DRAM技术，而使用昂贵但较快速的SRAM技术。缓存的设置是所有现代计算机系统发挥高性能的重要因素之一。');

INSERT INTO knowledge VALUES(null,'算法','算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。');
INSERT INTO knowledge VALUES(null,'高级语言','高级语言（High-level programming language）是一种独立于机器，面向过程或对象的语言。高级语言是参照数学语言而设计的近似于日常会话的语言。');
INSERT INTO knowledge VALUES(null,'C++','C++ 是一种高级语言，它是由 Bjarne Stroustrup 于 1979 年在贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，是一种面向对象的程序设计语言。');
INSERT INTO knowledge VALUES(null,'C','C 语言是一种通用的、面向过程式的计算机程序设计语言。1972 年，为了移植与开发 UNIX 操作系统，丹尼斯·里奇在贝尔电话实验室设计开发了 C 语言。');
INSERT INTO knowledge VALUES(null,'Python','Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。');
INSERT INTO knowledge VALUES(null,'递归','程序调用自身的编程技巧称为递归（ recursion）。');
INSERT INTO knowledge VALUES(null,'动态规划','动态规划（Dynamic Programming，DP）是运筹学的一个分支，是求解决策过程最优化的过程。');
INSERT INTO knowledge VALUES(null,'归纳法','归纳法一般指归纳推理，是一种由个别到一般的推理。由一定程度的关于个别事物的观点过渡到范围较大的观点，由特殊具体的事例推导出一般原理、原则的解释方法。');
INSERT INTO knowledge VALUES(null,'分治法','分治法，字面意思是“分而治之”，就是把一个复杂的1问题分成两个或多个相同或相似的子问题，再把子问题分成更小的子问题直到最后子问题可以简单地直接求解，原问题的解即子问题的解的合并');
INSERT INTO knowledge VALUES(null,'最先割技术','最先割技术包含了贪心算法和图的遍历');
INSERT INTO knowledge VALUES(null,'贪心算法','贪心算法（greedy algorithm，又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。');
INSERT INTO knowledge VALUES(null,'最小生成树','在给定一张无向图，如果在它的子图中，任意两个顶点都是互相连通，并且是一个树结构，那么这棵树叫做生成树。当连接顶点之间的图有权重时，权重之和最小的树结构为最小生成树！');
INSERT INTO knowledge VALUES(null,'Huffman','霍夫曼（Huffman）编码是一种编码方式，主要用于数据文件的压缩。它的主要思想是放弃文本文件的普通保存方式：不再使用7位或8位二进制数表示每一个字符，而是用较少的比特表示出现频率高的字符，用较多的比特表示出现频率低的字符。');
INSERT INTO knowledge VALUES(null,'BFS','广度优先搜索（也称宽度优先搜索，缩写BFS，以下采用广度来描述）是连通图的一种遍历策略。因为它的思想是从一个顶点V0开始，辐射状地优先遍历其周围较广的区域，因此得名。');
INSERT INTO knowledge VALUES(null,'DFS','沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过或者在搜寻时结点不满足条件，搜索将回溯到发现节点v的那条边的起始节点。');
INSERT INTO knowledge VALUES(null,'离散数据','离散数学（Discrete mathematics）是研究离散量的结构及其相互关系的数学学科，是现代数学的一个重要分支。离散的含义是指不同的连接在一起的元素，主要是研究基于离散量的结构和相互间的关系，其对象一般是有限个或可数个元素。');
INSERT INTO knowledge VALUES(null,'函数关系','确定性现象之间的关系常常表现为函数关系，即一种现象的数量确定以后，另一种现象的数量也随之完全确定，表现为一种严格的函数关系。');
INSERT INTO knowledge VALUES(null,'集合','集合，简称集，是数学中一个基本概念，也是集合论的主要研究对象。集合论的基本理论创立于19世纪，关于集合的最简单的说法就是在朴素集合论（最原始的集合论）中的定义，即集合是“确定的一堆东西”，集合里的“东西”则称为元素。');
INSERT INTO knowledge VALUES(null,'递推关系','如果数列f的第n项与它前一项或几项的关系可以用一个式子来表示，那么这个公式叫做这个数列的递推公式');
INSERT INTO knowledge VALUES(null,'鸽巢数据','鸽巢原理是离散数学学习种一大难点，主要在于如何去构造鸽子和巢的抽象化，本文是整理了一些笔者学习中遇到的典型例题，加了一些笔者自己的思路，希望能帮助学习离散数学的同学。');
INSERT INTO knowledge VALUES(null,'数据结构','数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。');
INSERT INTO knowledge VALUES(null,'数组','数组（Array）是有序的元素序列。');
INSERT INTO knowledge VALUES(null,'链表','链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。');
INSERT INTO knowledge VALUES(null,'图','在数学中，图是描述于一组对象的结构，其中某些对象对在某种意义上是“相关的”。');
INSERT INTO knowledge VALUES(null,'数据结构-树','树是n（n>=0）个结点的有限集。当n = 0时，称为空树。');
INSERT INTO knowledge VALUES(null,'二叉树','二叉树是另一种树形结构，其特点是每个结点至多只有两棵子树( 即二叉树中不存在度大于2的结点)，并且二叉树的子树有左右之分，其次序不能任意颠倒。');
INSERT INTO knowledge VALUES(null,'堆','堆(Heap)是计算机科学中一类特殊的数据结构，是最高效的优先级队列。堆通常是一个可以被看做一棵完全二叉树的数组对象。');
INSERT INTO knowledge VALUES(null,'B树','B-树是一种平衡的多路查找树，注意： B树就是B-树，"-"是个连字符号，不是减号 。');
INSERT INTO knowledge VALUES(null,'并查集','并查集被很多OIer认为是最简洁而优雅的数据结构之一，主要用于解决一些元素分组的问题。它管理一系列不相交的集合，并支持两种操作：');
INSERT INTO knowledge VALUES(null,'算法复杂度','算法复杂度是指算法在编写成可执行程序后，运行时所需要的资源，资源包括时间资源和内存资源。应用于数学和计算机导论。');
INSERT INTO knowledge VALUES(null,'时间复杂度','一个算法中的语句执行次数称为语句频度或时间频度，表示为T（n），n表示问题的规模');
INSERT INTO knowledge VALUES(null,'空间复杂度','算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。');
